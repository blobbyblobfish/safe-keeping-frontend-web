{"version":3,"sources":["serviceWorker.js","components/NavBar.js","pages/LoginPage.js","pages/RegistrationPage.js","history.js","components/UserTracker.js","pages/Dashboard.js","pages/MyAccount.js","App.js","reducers/auth.js","reducers/users.js","reducers/rootreducer.js","index.js"],"names":["Boolean","window","location","hostname","match","connect","state","className","auth","token","Fragment","to","dispatch","history","useState","email","setEmail","password","setPassword","onSubmit","e","preventDefault","console","log","credentials","configObj","method","headers","body","JSON","stringify","fetch","then","resp","json","type","payload","localStorage","tokenId","therapist","id","push","name","value","onChange","target","placeholder","setName","newUser","createBrowserHistory","user","diaryDatesArray","diary_cards","filter","dc","diary_card_trackers","map","x","Date","entry_timestamp","y","score","diaryDatesNestedArray","forEach","diaryCard","diary_card","groupedDatesObject","i","length","date","uniqueDatesNestedArray","Object","values","sort","a","b","prototype","datetimeString","this","getHours","getMinutes","victoryGroups","key","color","data","style","fill","fillOpacity","stroke","strokeWidth","labels","fontSize","padding","size","active","datum","dependentAxis","tickValues","first_name","domainPadding","domain","scale","parent","border","maxWidth","height","width","containerComponent","paddingBottom","users","appWithRouter","withRouter","useEffect","slice","path","component","Dashboard","render","routerProps","initialState","combineReducers","action","store","createStore","rootReducer","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9c92a91.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\n\nfunction NavBar({ state }) {\n    return (\n        <div className=\"navbar\">\n            {state.auth.token ? \n                <React.Fragment >\n                    <NavLink className=\"navlink\" to=\"/dashboard\">Dashboard</NavLink>\n                    <NavLink className=\"navlink\" to=\"/account\">My Account</NavLink>\n                    <NavLink className=\"navlink\" to=\"/logout\">Logout</NavLink>\n                </React.Fragment>\n\n            : \n                <React.Fragment>\n                    <NavLink className=\"navlink\" to=\"/login\">Login</NavLink>\n                    <NavLink className=\"navlink\" to=\"/register\">Register</NavLink>\n                </React.Fragment>\n            }\n        </div>\n    )\n}\n\nexport default connect((state)=>({state}))(NavBar)","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\n// import history from '../history'\n\nfunction LoginPage({ state, dispatch, history }) {\n\n    //Controlled inputs\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    function handleLogin(e) {\n        e.preventDefault()\n\n        console.log(history)\n\n        const credentials = {\n            email: email,\n            password: password\n        }\n\n        const configObj = {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"accepts\": \"application/json\"\n            },\n            body: JSON.stringify(credentials)\n        }\n\n        fetch(`http://localhost:3000/therapists/login`, configObj)\n            .then(resp => resp.json())\n            .then(json => {\n                if (json.token) {\n                    console.log(json)\n                    dispatch({ type: \"LOGIN\", payload: json })\n                    localStorage.tokenId = `${json.token}${json.therapist.id}`\n                    history.push(\"/dashboard\")\n\n                    // if (history.location.pathname === \"/dashboard\") {window.location.reload(true)}\n                }\n            })\n        \n    }\n\n    return <div>\n        <h1>Welcome</h1>\n        <form onSubmit={handleLogin}>\n            <input name=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} type=\"text\" placeholder=\"email\" />\n            <input name=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} type=\"password\" placeholder=\"password\" />\n            <input type=\"submit\" />\n        </form>\n        <NavLink to=\"/register\">Don't have an account?</NavLink>\n    </div>\n}\n\nexport default connect((state)=>({state}))(LoginPage)","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\n// import history from '../history'\n\nfunction RegistrationPage({ state, dispatch, history }) {\n\n    //Controlled inputs\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    function handleRegister(e) {\n        e.preventDefault()\n\n        const newUser = {\n            name: name,\n            email: email,\n            password: password\n        }\n\n        const configObj = {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"accepts\": \"application/json\"\n            },\n            body: JSON.stringify(newUser)\n        }\n\n        fetch(`http://localhost:3000/therapists`, configObj)\n            .then(resp => resp.json())\n            .then(json => {\n                dispatch({ type: \"LOGIN\", payload: json })\n                localStorage.tokenId = `${json.token}${json.therapist.id}`\n                history.push(\"/dashboard\")\n\n                // if (history.location.pathname === \"/dashboard\") {window.location.reload(true)}\n            })\n    }\n\n    return <div>\n        <h1>Register</h1>\n        <form onSubmit={handleRegister}>\n            <input name=\"name\" value={name} onChange={(e) => setName(e.target.value)} type=\"text\" placeholder=\"Name\" />\n            <input name=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} type=\"text\" placeholder=\"email\" />\n            <input name=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} type=\"password\" placeholder=\"password\" />\n            <input type=\"submit\" />\n        </form>\n        <NavLink to=\"/login\">Have an account?</NavLink>\n    </div>\n}\n\nexport default connect((state)=>({state}))(RegistrationPage)","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()","import React from 'react'\nimport { connect } from 'react-redux'\nimport { VictoryVoronoiContainer, VictoryAxis, VictoryScatter, VictoryGroup, VictoryChart } from 'victory'\n\nfunction UserTracker({ user }) {\n\n    //Get array of objects where {x: date, y: score} from diary cards.\n    const diaryDatesArray = user.diary_cards.filter(dc => !!dc.diary_card_trackers[0] > 0).map(dc => {\n        const dateObj = new Date(dc.entry_timestamp)\n        return {x: dateObj, y: dc.diary_card_trackers[0].score}\n    })\n\n    //Break entries into different arrays by date  \n    const diaryDatesNestedArray = []\n    diaryDatesArray.forEach((diaryCard) => {\n        diaryDatesNestedArray.push(diaryDatesArray.filter((diary_card) => diary_card.x === diaryCard.x))\n    })\n    \n    const groupedDatesObject = {}\n    for (let i=0; i < diaryDatesArray.length; i++) {\n        const date = diaryDatesArray[i].x\n        if (!groupedDatesObject[date]) { groupedDatesObject[date] = [] }\n        groupedDatesObject[date].push(diaryDatesArray[i])\n    }\n    \n    const uniqueDatesNestedArray = Object.values(groupedDatesObject).sort((a, b) => a[0].x > b[0].x ? 1 : -1)\n\n    //Get date and time formatted from date object\n    Date.prototype.datetimeString = function () {\n        return `${this.getHours() > 12 ? this.getHours() - 12 : this.getHours()}:${this.getMinutes() < 10 ? 0 : ''}${this.getMinutes()} ${this.getHours() < 12 ? 'am' : 'pm'}`\n    }\n\n    //Render one victory group per date\n    const victoryGroups = uniqueDatesNestedArray.map((date) => {\n\n        return <VictoryGroup\n                key={date[0].x} color=\"#2c2c34\" data={date}\n                style={{\n                        data: { fill: \"#2c2c34\", fillOpacity: 0.6, stroke: \"#2c2c34\", strokeWidth: 1 },\n                        labels: { fontSize: 15, fill: \"#2c2c34\", padding: 15 },\n                    }} >\n                                    \n                <VictoryScatter\n                size={({ active }) => active ? 14 : 10} \n                labels={({ datum }) => `${datum.x.datetimeString()}`}\n                // labelComponent={<CustomLabel />}\n                // labelComponent={<VictoryTooltip style={{ fontSize: 10 }}/>}\n                />\n                \n                {/* Renders only x-axis */}\n                <VictoryAxis />\n                <VictoryAxis dependentAxis tickValues={[1, 2, 3, 4, 5]} />\n            \n            </VictoryGroup>\n        }\n    )\n\n    return (\n        <div className=\"row\">\n            \n            <div className=\"column1\">\n                <h2>{user.first_name}</h2>\n                <p>{user.email}</p>\n            </div>\n\n            <div className=\"column2\">\n                <VictoryChart className='chart' domainPadding={{ x: 30, y: 20 }} domain={{ x: [uniqueDatesNestedArray[0][0].x, new Date()], y: [1, 5] }} scale={{ x: \"time\" }}\n                    style={{ parent: { border: \"1px solid #ccc\", maxWidth: '80%' }}} \n                    height={400} width={1000} containerComponent={<VictoryVoronoiContainer />}>\n                    \n                    {victoryGroups}\n                    \n                </VictoryChart>\n            </div>\n        </div>\n    )\n}\n\nexport default connect((state)=>({state}))(UserTracker)","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport history from '../history'\nimport UserTracker from '../components/UserTracker'\n\nfunction Dashboard({ state, dispatch }) {\n\n    function renderUserTrackers() {\n        return state.users.map(user => <UserTracker key={user.id} user={user} />)\n    }\n\n    return (\n        <div className=\"dashboard\">\n            <h4 className=\"rightAlign\">My Name: {state.auth.name} </h4>\n            <h4 className=\"rightAlign\" style={{ paddingBottom: 20 }}>My Email: {state.auth.email} </h4>\n            {renderUserTrackers()}\n        </div>\n    )\n}\n\nexport default connect((state)=>({state}))(Dashboard)","import React from 'react'\nimport { connect } from 'react-redux'\nimport history from '../history'\n\nfunction MyAccount({ state, dispatch }) {\n\n    return (\n        <div>\n            <h1>My Account</h1>\n        </div>\n    )\n}\n\nexport default connect((state)=>({state}))(MyAccount)","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Route, withRouter, Switch } from 'react-router-dom'\n\nimport NavBar from './components/NavBar'\nimport LoginPage from './pages/LoginPage'\nimport RegistrationPage from './pages/RegistrationPage'\nimport Dashboard from './pages/Dashboard'\nimport MyAccount from './pages/MyAccount'\n\n// import history from './history'\n// import logo from './logo.svg'\nimport './App.css'\n\nfunction App( { state, dispatch, history } ) {\n\n  //Utility\n  console.log(\"IN APP ROOT\", state)\n\n  useEffect(() => {\n    if (localStorage.tokenId && !state.auth.token) {\n      \n      const id = localStorage.tokenId.slice(89)\n\n      fetch(`http://localhost:3000/therapists/${id}`)\n        .then(resp => resp.json())\n        .then(json => {\n          dispatch({ type: \"LOGIN_WITH_TOKEN\", payload: json })\n        })\n    }\n\n    if (!localStorage.tokenId) {\n      history.push(\"/login\")\n    }\n\n  }, []) \n\n  function renderRegistrationPage() {\n    return <RegistrationPage />\n  }\n\n  function renderLoginPage() {\n    return <LoginPage />\n  }\n\n  function renderDashboard() {\n    return <Dashboard />\n  }\n\n  function renderMyAccount() {\n    return <MyAccount />\n  }\n\n  function handleLogout() {\n      localStorage.tokenId = ''\n      dispatch({type: \"LOGOUT\"})\n  }\n    \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Safe Keeping</h1>\n      </header>\n      <NavBar />\n      <Switch>\n        <Route path='/dashboard' component={Dashboard} />\n        <Route path='/login' render={(routerProps) => <LoginPage {...routerProps} />} />\n        <Route path='/register' render={(routerProps) => <RegistrationPage {...routerProps} />} />\n        <Route path=\"/logout\" render={handleLogout} />\n        <Route path='/account' render={renderMyAccount} />\n      </Switch>\n    </div>\n  )\n}\n\nconst appWithRouter = withRouter(App)\nexport default connect((state)=>({state}))(appWithRouter)\n","const initialState = {\n    token: '',\n    id: 0,\n    name: '',\n    email: ''\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n\n        case \"LOGIN\":\n            return {\n                token: action.payload.token,\n                id: action.payload.therapist.id,\n                name: action.payload.therapist.name,\n                email: action.payload.therapist.email\n            }\n        \n        case \"LOGIN_WITH_TOKEN\":\n            return {\n                token: localStorage.tokenId.slice(0, 88),\n                id: action.payload.id,\n                name: action.payload.name,\n                email: action.payload.email\n            }\n        \n        case \"LOGOUT\":\n            return initialState\n        \n        default: return state\n    }\n}","const initialState = []\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n\n        case \"LOGIN\":\n            return action.payload.therapist.users\n        \n        case \"LOGIN_WITH_TOKEN\":\n            return action.payload.users\n        \n        case \"LOGOUT\":\n            return initialState\n        \n        default: return state\n    }\n}","import { combineReducers } from 'redux'\nimport auth from './auth'\nimport users from './users'\n\nexport default combineReducers({\n    auth, \n    users\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\n\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport rootReducer from './reducers/rootreducer'\n  \nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store} >\n        <Route path=\"/\" render={(routerProps) => <App {...routerProps} />} />\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}